Minimal Production System
=========================

Introduction
------------
The Minimal Production System (MPS) started out as an experiment in Common Lisp
macrology (the idea was to convert a subset of CLIPS syntax into executable
Common Lisp code) but since the | character has special meaning to the Common
Lisp reader it's difficult to implement the or-connective-constraint in
pattern-CE's. So, instead I'll focus on implementing a production system using
Common Lisp syntax instead.

There's a bit more info about the CLIPS expirement on my old blog // comments
are lies! See http://commentsarelies.blogspot.com/search/label/MPS

Current Status
--------------
Currently (2009-03-17) MPS can compile very simple rules and execute them. And
that's about it. Not very useful, but at least it's a start.

Simplest example possible
-------------------------
CL-USER> (in-package :mps)
#<Package "MPS">
MPS> (setf generated-code t)
T
MPS> (defstruct a b)
A
MPS> (defstruct b c)
B
MPS> (defrule ab
       (a (b ?value))
       (b (c ?value))
       =>
       (print ?value))

(DEFUN ALPHA/AB-0/A-B (KEY FACT TIMESTAMP)
  (PRINT (LIST 'ALPHA/AB-0/A-B :KEY KEY :FACT FACT :TIMESTAMP TIMESTAMP))
  (WHEN T
    (STORE KEY FACT 'MEMORY/ALPHA/AB-0/A-B)
    (PROPAGATE KEY FACT TIMESTAMP 'ALPHA/AB-0/A-B)))
(ADD-TO-ROOT :TYPE A :NODE ALPHA/AB-0/A-B) 
(DEFUN BETA/AB-0-RIGHT (KEY FACT TIMESTAMP)
  (PRINT (LIST 'BETA/AB-0-RIGHT :KEY KEY :FACT FACT :TIMESTAMP TIMESTAMP))
  (STORE KEY (LIST FACT) 'MEMORY/BETA/AB-0)
  (PROPAGATE KEY (LIST FACT) TIMESTAMP 'BETA/AB-0))
(CONNECT-NODES :FROM ALPHA/AB-0/A-B :TO BETA/AB-0-RIGHT) 
(DEFUN ALPHA/AB-1/B-C (KEY FACT TIMESTAMP)
  (PRINT (LIST 'ALPHA/AB-1/B-C :KEY KEY :FACT FACT :TIMESTAMP TIMESTAMP))
  (WHEN T
    (STORE KEY FACT 'MEMORY/ALPHA/AB-1/B-C)
    (PROPAGATE KEY FACT TIMESTAMP 'ALPHA/AB-1/B-C)))
(ADD-TO-ROOT :TYPE B :NODE ALPHA/AB-1/B-C) 
(LET ((LEFT-MEMORY 'MEMORY/BETA/AB-0) (RIGHT-MEMORY 'MEMORY/ALPHA/AB-1/B-C))
  (DEFUN BETA/AB-1-LEFT (KEY TOKEN TIMESTAMP)
    (PRINT (LIST 'BETA/AB-1-LEFT :KEY KEY :TOKEN TOKEN :TIMESTAMP TIMESTAMP))
    (DOLIST (FACT (CONTENTS-OF RIGHT-MEMORY))
      (LET ((TOK (APPEND TOKEN (LIST FACT))))
        (WHEN (AND (EQUAL (B-C (NTH 1 TOK)) (A-B (NTH 0 TOK))) T)
          (STORE KEY TOK 'MEMORY/BETA/AB-1)
          (PROPAGATE KEY TOK TIMESTAMP 'BETA/AB-1)))))
  (DEFUN BETA/AB-1-RIGHT (KEY FACT TIMESTAMP)
    (PRINT (LIST 'BETA/AB-1-RIGHT :KEY KEY :FACT FACT :TIMESTAMP TIMESTAMP))
    (DOLIST (TOKEN (CONTENTS-OF LEFT-MEMORY))
      (LET ((TOK (APPEND TOKEN (LIST FACT))))
        (WHEN (AND (EQUAL (B-C (NTH 1 TOK)) (A-B (NTH 0 TOK))) T)
          (STORE KEY TOK 'MEMORY/BETA/AB-1)
          (PROPAGATE KEY TOK TIMESTAMP 'BETA/AB-1))))))
(CONNECT-NODES :FROM BETA/AB-0 :TO BETA/AB-1-LEFT) 
(CONNECT-NODES :FROM ALPHA/AB-1/B-C :TO BETA/AB-1-RIGHT) 
(DEFUN RHS/AB (ACTIVATION)
  (PRINT (LIST 'RHS/AB ACTIVATION))
  (LET* ((TOKEN (ACTIVATION-TOKEN ACTIVATION))
         (#:G38 (NTH 0 TOKEN))
         (#:G41 (NTH 1 TOKEN))
         (?VALUE (A-B #:G38)))
    (PRINT ?VALUE)))
;Compiler warnings :
;   In RHS/AB: Unused lexical variable #:G41
(DEFUN PRODUCTION/AB (KEY TOKEN TIMESTAMP)
  (PRINT (LIST 'PRODUCTION/AB :KEY KEY :TOKEN TOKEN :TIMESTAMP TIMESTAMP))
  (STORE KEY
         (MAKE-ACTIVATION
           :RULE
           'AB
           :SALIENCE
           0
           :TOKEN
           TOKEN
           :TIMESTAMP
           TIMESTAMP
           :RHS-FUNC
           #'RHS/AB
           :PROD-MEM
           'MEMORY/PRODUCTION/AB)
         'MEMORY/PRODUCTION/AB))
(CONNECT-NODES :FROM BETA/AB-1 :TO PRODUCTION/AB) 
(ADD-TO-PRODUCTION-NODES :NODE PRODUCTION/AB) AB
MPS> (assert-facts #S(a :b 1) #S(a :b 2) #S(b :c 2))
3
MPS> (run)

2
1
MPS> 